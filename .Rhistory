group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
outliers
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
#remove outliers
df2 <- data_2xLPS_mouse  %>%
group_by(MouseID, Treatment, Sex) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
#remove outliers
df2 <- data_2xLPS_mouse  %>%
group_by(MouseID, Treatment, Sex) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
df2 <- merge(df2, outliers, by=c("Measure","UniqueID"), all.x=T)
new_DF <- df2[is.na(df2$is.outlier),]
new_DF <- new_DF[,1:17]
colnames(new_DF) <- gsub("\\.x","",colnames(new_DF))
df2
new_DF <- df2[is.na(df2$is.outlier),]
df2
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
#remove outliers
df2 <- data_2xLPS_mouse  %>%
group_by(MouseID, Treatment, Sex) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
df2
df2 <- merge(df2, outliers, by=c("Measure","UniqueID"), all.x=T)
df2
new_DF <- df2[is.na(df2$is.outlier),]
new_DF
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
outliers
tail(outliers)
filter <- data_2xLPS_mouse %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
filter <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
filter
is.na(df2$is.outlier)
df2$is.outlier
filter
subset(data_2xLPS_mouse, UniqueID %in% filter$UniqueID)
subset(data_2xLPS_mouse, UniqueID !%in% filter$UniqueID)
data_2xLPS_mouse %>% filter(UniqueID %in% filter$UniqueID)
data_2xLPS_mouse %>% filter!(UniqueID %in% filter$UniqueID)
data_2xLPS_mouse %>% filter(!UniqueID %in% filter$UniqueID)
data_2xLPS_mouse %>% filter(UniqueID %in% !filter$UniqueID)
data_2xLPS_mouse %>% filter(!UniqueID %in% filter$UniqueID)
data_2xLPS_mouse %>% filter(!UniqueID %in% c(filter$UniqueID))
subset(data_2xLPS_mouse, !(UniqueID %in% filter$UniqueID))
filter$UniqueID
filter <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
filter
subset(data_2xLPS_mouse, !(UniqueID %in% filter$UniqueID))
nrow(filter)
subset(data_2xLPS_mouse, UniqueID %in% filter$UniqueID) %>% nrow()
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
data_2xLPS_mouse %>% filter(UniqueID %in% filterdf$UniqueID) %>% nrow()
data_2xLPS_mouse
filterdf
data_2xLPS_mouse %>% filter(!data_2xLPS_mouse$UniqueID %in% filterdf$UniqueID) %>% nrow()
data_2xLPS_mouse$UniqueID
filterdf$UniqueID
data_2xLPS_mouse$UniqueID %>% head(5)
filterdf$UniqueID %>% head(5)
nrow(filterdf)
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
outliers
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
nrow(filterdf)
nrow(outliers)
filterdf$UniqueID %>% factor() %>% levels()
nrow(data_2xLPS_mouse)
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment, Measure) %>%
identify_outliers(Value)
outliers
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
filterdf
data_2xLPS_mouse %>% filter(!data_2xLPS_mouse$UniqueID %in% filterdf$UniqueID) %>% nrow()
nrow(data_2xLPS_mouse)
data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID) %.% nrow()
data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID) %>% nrow()
nrow(filterdf) + 41247
data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID) %>% nrow()
nrow(filterdf)
41247+2637
nrow(data_2xLPS_mouse)
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment, Measure) %>%
identify_outliers(Value)
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
filterdf
nrow(filterdf)
data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID)
filterdf
nrow(filterdf)
filterdf$UniqueID %>% factor() %>% levels()
2085 + nrow(data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID))
new_DF2 <- final %>%
group_by(MouseID, Treatment, Sex) %>%
spread(Measure, Value)
final <- data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID)
new_DF2 <- final %>%
group_by(MouseID, Treatment, Sex) %>%
spread(Measure, Value)
final
new_DF2 <- final %>%
group_by(MouseID, Treatment, Sex) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment, Measure) %>%
spread(Measure, Value)
new_DF2
colnames(new_DF2)
?spread
??spread
data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex)
data_2xLPS
data_2xLPS <- data_2xLPS_mouse
data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x)))
data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>% colnames()
remove.extreme.outliers_animals <- function(data, ...){
outliers <- data %>%
group_by(..., Measure) %>>%
identify_outliers(Value)
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
final <- data %>% filter(!MouseID %in% filterdf$MouseID)
final
}
# prepare data for downstream analysis
data <- data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
remove.extreme.outliers_animals(data, MouseID, Sex, Treatment, BrainRegion, Antibody)
outliers <- data %>%
group_by(..., Measure) %>%
identify_outliers(Value)
remove.extreme.outliers_animals <- function(data, ...){
outliers <- data %>%
group_by(..., Measure) %>%
identify_outliers(Value)
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
final <- data %>% filter(!MouseID %in% filterdf$MouseID)
final
}
remove.extreme.outliers_animals(data, MouseID, Sex, Treatment, BrainRegion, Antibody)
test <- remove.extreme.outliers_animals(data, MouseID, Sex, Treatment, BrainRegion, Antibody)
test
View(test)
nrow(data)
nrow(test)
remove.extreme.outliers_animals <- function(data, ...){
outliers <- data %>%
group_by(..., Measure) %>%
identify_outliers(Value)
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
print(filterdf)
final <- data %>% filter(!MouseID %in% filterdf$MouseID)
final
}
test <- remove.extreme.outliers_animals(data, MouseID, Sex, Treatment, BrainRegion, Antibody)
outliers <- data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure) %>%
identify_outliers(Value)
outliers
data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure)
data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure) %>% summarise(Measure, mean)
data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure) %>% summarise(Measure,
~mean)
?summarise
data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure) %>% summarise(test = mean(Measure))
data %>%
group_by(Measure) %>% summarise(test = mean(Measure))
data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure) %>% summarise(test = mean(Value))
test <- remove.extreme.outliers_animals(data, MouseID, Sex, Treatment, BrainRegion, Antibody)
test
nrow(test)
nrow(Data)
nrow(data)
data
devtools::document()
# prepare data for downstream analysis
data <- data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
# filter out data you want to run stats on and make sure to make any variables included in model into factors
stats.input <- data
stats.input$Treatment <- factor(stats.input$Treatment)
# run stats analysis for changes in individual morphology measures
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
stats.testing <- stats_morphologymeasures.animal(stats.input %>% filter(Antibody=="Iba1"), "Value ~ Treatment*BrainRegion",
"~Treatment|BrainRegion", "~Treatment", "bonferroni")
stats.testing[[5]]
stats.testing[[6]]
stats.testing[[5]] # levene test %>% view()
stats.testing[[5]] # levene test %>% View()
stats.testing[[5]] %>% View()
?rcorr
cp
skeleton_tidying
knitr::opts_chunk$set(echo = TRUE)
library(MicrogliaMorphologyR)
set.seed(1)
data_2xLPS <- MicrogliaMorphologyR::data_2xLPS_mouse_fuzzykmeans
# gather your numerical morphology data into one column ('measure') which contains the feature name, and another column ('value') which contains measured values
data_2xLPS_gathered <- data_2xLPS %>% gather(measure, value, 9:35)
# transform your data in appropriate manner for downstream analyses
data_2xLPS_logtransformed <- transform_log(data_2xLPS, 1, start=9, end=35) # we will use the logtransformed data as our PCA input
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
# get sample size of data based on factors of interest
samplesize(data_2xLPS, MouseID, Treatment, Antibody)
?featurecorrelations
featurecorrelations(data_2xLPS, featurestart=9, featureend=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
featurecorrelations(data_2xLPS, featurestart=9, featureend=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
featurecorrelations(data_2xLPS, featurestart=9, featureend=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
?shapiro_test
??shapiro_test
??fviz_nbclust
??fcm
??kmeans
library(devtools)
use_package("rstatix")
document()
load()
clusterpercentage_boxplots()
clusterpercentage_boxplots
devtools::document()
devtools::document()
devtools::document()
?stable
?xtable
devtools::documenT()
devtools::document()
data_2xLPS <- MicrogliaMorphologyR::data_2xLPS_mouse
knitr::opts_chunk$set(echo = TRUE)
# prepare data for downstream analysis
data <- data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
# filter out data you want to run stats on and make sure to make any variables included in model into factors
stats.input <- data
stats.input$Treatment <- factor(stats.input$Treatment)
# run stats analysis for changes in individual morphology measures
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
stats.testing <- stats_morphologymeasures.animal(stats.input %>% filter(Antibody=="Iba1"), "Value ~ Treatment*BrainRegion",
"~Treatment|BrainRegion", "~Treatment*BrainRegion", "bonferroni")
library(rxtatix)
library(rstatix)
# run stats analysis for changes in individual morphology measures
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
stats.testing <- stats_morphologymeasures.animal(stats.input %>% filter(Antibody=="Iba1"), "Value ~ Treatment*BrainRegion",
"~Treatment|BrainRegion", "~Treatment*BrainRegion", "bonferroni")
stats.testing[[3]]
stats.input
stats.testing[[3]] %>% head(5)
stats.testing[[3]]
stats.testing[[2]]
stats.testing[[5]] %>% head(6)
stats.testing[[6]] %>% head(6)
merge_data
skeleton_tidying
fraclac_tidying
merge_data
?featurecorrelations
??featurecorrelations
devtools::document()
cp %>%
ggplot(aes(x=Cluster, y=percentage, group=interaction(Cluster, Treatment))) +
#facet_wrap(~Sex) +
geom_boxplot(aes(group=interaction(Cluster, Treatment), fill=Treatment)) +
scale_fill_manual(values=c("#fde725","#482878")) +
geom_point(position=position_dodge(width=0.8), size=0.75, aes(group=interaction(Cluster,Treatment), color=Sex)) +
ggtitle("1xLPS mouse dataset: K-means clusters") +
labs(fill="Treatment") +
theme_bw(base_size=14) +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1))
knitr::opts_chunk$set(echo = TRUE)
library(MicrogliaMorphologyR)
devtools::load_all()
data_2xLPS <- MicrogliaMorphologyR::data_2xLPS_mouse_fuzzykmeans
# prepare data for downstream analysis
data <- data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
# filter out data you want to run stats on and make sure to make any variables included in model into factors
stats.input <- data
stats.input$Treatment <- factor(stats.input$Treatment, levels=c("PBS","2xLPS"))
stats.input$BrainRegion <- factor(stats.input$BrainRegion)
stats.input$Antibody <- factor(stats.input$Antibody)
stats.input %>% filter(Measure=="Density of foreground pixels in hull area") %>%
ggplot(aes(x=Treatment, y=Value, group=Treatment)) +
#facet_wrap(~Sex) +
geom_boxplot(aes(group=Treatment, fill=Treatment)) +
scale_fill_manual(values=c("#fde725","#482878")) +
geom_point(position=position_dodge(width=0.8), size=0.75, aes(group=Treatment, color=Sex)) +
ggtitle("1xLPS mouse dataset: Density of foreground pixels in hull area") +
labs(fill="Treatment") +
theme_bw(base_size=14) +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1))
# prepare data for downstream analysis
data <- data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
# filter out data you want to run stats on and make sure to make any variables included in model into factors
stats.input <- data
stats.input$Treatment <- factor(stats.input$Treatment, levels=c("PBS","2xLPS"))
stats.input$BrainRegion <- factor(stats.input$BrainRegion)
stats.input$Antibody <- factor(stats.input$Antibody)
stats.input %>% filter(Measure=="# of junctions"|
Measure=="Area"|
Measure=="Circularity") %>%
ggplot(aes(x=Treatment, y=Value, group=Treatment)) +
facet_wrap(~Measure, scales="free_y") +
geom_boxplot(aes(group=Treatment, fill=Treatment)) +
scale_fill_manual(values=c("#fde725","#482878")) +
geom_point(position=position_dodge(width=0.8), size=0.75, aes(group=Treatment, color=Sex)) +
labs(fill="Treatment") +
theme_bw(base_size=12) +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1))
stats.input %>% filter(Measure=="# of junctions"|
Measure=="Area"|
Measure=="Circularity") %>%
ggplot(aes(x=Treatment, y=Value, group=Treatment)) +
facet_wrap(~Measure*Antibody*BrainRegion, scales="free_y") +
geom_boxplot(aes(group=Treatment, fill=Treatment)) +
scale_fill_manual(values=c("#fde725","#482878")) +
geom_point(position=position_dodge(width=0.8), size=0.75, aes(group=Treatment, color=Sex)) +
labs(fill="Treatment") +
theme_bw(base_size=12) +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1))
# calculate cluster percentages across variables of interest
cp <- clusterpercentage(data_2xLPS, "Cluster", MouseID, Antibody, Treatment, Sex, BrainRegion)
cp$Treatment <- factor(cp$Treatment, levels=c("PBS","2xLPS"))
# prepare data for downstream analysis
data <- data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
# filter out data you want to run stats on and make sure to make any variables included in model into factors
stats.input <- data
stats.input$Treatment <- factor(stats.input$Treatment, levels=c("PBS","2xLPS"))
stats.input$BrainRegion <- factor(stats.input$BrainRegion)
stats.input$Antibody <- factor(stats.input$Antibody)
stats.input %>% filter(Measure=="# of junctions") %>%
ggplot(aes(x=Treatment, y=Value, group=Treatment)) +
facet_wrap(~Measure*Antibody*BrainRegion) +
geom_boxplot(aes(group=Treatment, fill=Treatment)) +
scale_fill_manual(values=c("#fde725","#482878")) +
geom_point(position=position_dodge(width=0.8), size=0.75, aes(group=Treatment, color=Sex)) +
labs(fill="Treatment") +
theme_bw(base_size=14) +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1))
# # of junctions
stats.input %>% filter(Measure=="# of junctions") %>%
ggplot(aes(x=Treatment, y=Value, group=Treatment)) +
facet_wrap(~Measure*Antibody*BrainRegion) +
geom_boxplot(aes(group=Treatment, fill=Treatment)) +
scale_fill_manual(values=c("#fde725","#482878")) +
geom_point(position=position_dodge(width=0.8), size=0.75, aes(group=Treatment, color=Sex)) +
labs(fill="Treatment") +
theme_classic(base_size=14) +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
theme(strip.background=element_rect(fill="#CCCCCC"))
stats.input %>% filter(Measure=="# of junctions") %>% select(Value) %>% min()
stats.input %>% filter(Measure=="# of junctions") -> test
min(test$Value)
max(test$Value)
stats.input %>% filter(Measure=="# of junctions") %>%
ggplot(aes(x=Treatment, y=Value, group=Treatment)) +
facet_wrap(~Measure*Antibody*BrainRegion, scales="free") +
geom_boxplot(aes(group=Treatment, fill=Treatment)) +
scale_fill_manual(values=c("#fde725","#482878")) +
geom_point(position=position_dodge(width=0.8), size=0.75, aes(group=Treatment, color=Sex)) +
labs(fill="Treatment") +
theme_classic(base_size=14) +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
theme(strip.background=element_rect(fill="#CCCCCC")) +
ylim(10, 21)
stats.input %>% filter(Measure=="# of junctions") %>%
ggplot(aes(x=Treatment, y=Value, group=Treatment)) +
facet_wrap(~Measure*Antibody*BrainRegion, scales="free") +
geom_boxplot(aes(group=Treatment, fill=Treatment)) +
scale_fill_manual(values=c("#fde725","#482878")) +
geom_point(position=position_dodge(width=0.8), size=0.75, aes(group=Treatment, color=Sex)) +
labs(fill="Treatment") +
theme_classic(base_size=12) +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
theme(strip.background=element_rect(fill="#CCCCCC")) +
ylim(10,21)
stats.input %>% filter(Measure=="Area") -> test
min(test$Value)
max(test$Value)
stats.input %>% filter(Measure=="Area") %>%
ggplot(aes(x=Treatment, y=Value, group=Treatment)) +
facet_wrap(~Measure*Antibody*BrainRegion, scales="free") +
geom_boxplot(aes(group=Treatment, fill=Treatment)) +
scale_fill_manual(values=c("#fde725","#482878")) +
geom_point(position=position_dodge(width=0.8), size=0.75, aes(group=Treatment, color=Sex)) +
labs(fill="Treatment") +
theme_classic(base_size=12) +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
theme(strip.background=element_rect(fill="#CCCCCC")) +
ylim(6605,11476)
stats.input %>% filter(Measure=="Circularity") -> test
min(test$Value)
max(test$Value)
stats.input %>% filter(Measure=="Circularity") %>%
ggplot(aes(x=Treatment, y=Value, group=Treatment)) +
facet_wrap(~Measure*Antibody*BrainRegion, scales="free") +
geom_boxplot(aes(group=Treatment, fill=Treatment)) +
scale_fill_manual(values=c("#fde725","#482878")) +
geom_point(position=position_dodge(width=0.8), size=0.75, aes(group=Treatment, color=Sex)) +
labs(fill="Treatment") +
theme_classic(base_size=12) +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1)) +
theme(strip.background=element_rect(fill="#CCCCCC")) +
ylim(0.75,0.82)
set.seed(2)
data_1xLPS <- MicrogliaMorphologyR::data_1xLPS_mouse
data_1xLPS
# transform your data in appropriate manner for downstream analyses
data_1xLPS_logtransformed <- transform_log(data_1xLPS, 1, start=7, end=33) # we will use the logtransformed data as our PCA input
pcadata_elbow(data_1xLPS_logtransformed, start=7, end=33)
pcadata_elbow(data_1xLPS_logtransformed, featurestart=7, featureend=33)
colnames(data_1xLPS)
pca_data <- pcadata(data_1xLPS_logtransformed, start=7, end=33,
pc.start=1, pc.end=10)
pca_data <- pcadata(data_1xLPS_logtransformed, featurestart=7, featureend=33,
pc.start=1, pc.end=10)
## for k-means clustering: scale PCs 1-3, which together describe ~85% of variability
pca_data_scale <- transform_scale(pca_data, start=1, end=3) # scale pca data as input for k-means clustering
kmeans_input <- pca_data_scale[1:3]
# cluster and combine with original data
data_kmeans <- kmeans(kmeans_input, centers=4)
pca_kmeans <- cbind(pca_data[1:2], data_1xLPS, as.data.frame(data_kmeans$cluster)) %>%
rename(Cluster=`data_kmeans$cluster`)
plot <- clusterplots(pca_kmeans, "PC1", "PC2")
plot + scale_colour_manual(values=c("#BBCC33","#44BB99","#EEDD88","#EE8866"))
set.seed(2)
data_1xLPS <- MicrogliaMorphologyR::data_1xLPS_mouse
# transform your data in appropriate manner for downstream analyses
data_1xLPS_logtransformed <- transform_log(data_1xLPS, 1, start=7, end=33) # we will use the logtransformed data as our PCA input
pcadata_elbow(data_1xLPS_logtransformed, featurestart=7, featureend=33)
pca_data <- pcadata(data_1xLPS_logtransformed, featurestart=7, featureend=33,
pc.start=1, pc.end=10)
## for k-means clustering: scale PCs 1-3, which together describe ~85% of variability
pca_data_scale <- transform_scale(pca_data, start=1, end=3) # scale pca data as input for k-means clustering
kmeans_input <- pca_data_scale[1:3]
# check for optimal number of clusters using wss and silhouette methods
sampling <- kmeans_input[sample(nrow(kmeans_input), 5000),] #sample 5000 random rows for cluster optimization
fviz_nbclust(sampling, kmeans, method = 'wss', nstart=25, iter.max=50) # 4 clusters
fviz_nbclust(sampling, kmeans, method = 'silhouette', nstart=25, iter.max=50) # 4 clusters
# cluster and combine with original data
data_kmeans <- kmeans(kmeans_input, centers=4)
pca_kmeans <- cbind(pca_data[1:2], data_1xLPS, as.data.frame(data_kmeans$cluster)) %>%
rename(Cluster=`data_kmeans$cluster`)
plot <- clusterplots(pca_kmeans, "PC1", "PC2")
plot + scale_colour_manual(values=c("#BBCC33","#44BB99","#EEDD88","#EE8866"))
