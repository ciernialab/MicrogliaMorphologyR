cor.coef = TRUE, cor.method = "spearman")
?ggscatter
colnames(data_2xLPS)
ggscatter(data_2xLPS, x = "# of branches", y = "# of junctions",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman")
ggscatter(data_2xLPS, x = "# of branches", y = "Average branch length",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman")
ggscatter(data_2xLPS, x = "# of branches", y = "Average branch length",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson")
ggscatter(data_2xLPS, x = "# of branches", y = "Average branch length",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson")
hi <- rcorr(as.matrix(data_2xLPS_logtransformed[,9:35]), type="spearman")
mat1 <- hi$r
filter <- which(abs(mat1)<0.8)
mat2 <- hi$P
mat2 <- round(mat2,3)
mat2[mat2 < 0.05] <- "*" # significant p-values
mat2[mat2 > 0.05] <- "" # insignificant p-values
mat2[is.na(mat2)] <- "" # NAs (should be 27)
mat2[filter] <- "" # correlation values that are less than 0.5 (weak correlations)
# make heatmap
pheatmap(hi$r, display_numbers = mat2,
fontsize_number=20, fontsize=20, fontsize_row=12, fontsize_col=12,
main="Correlations across features")
# make heatmap
pheatmap(hi$r, display_numbers = mat2,
fontsize_number=8, fontsize=8, fontsize_row=8, fontsize_col=8,
main="Correlations across features")
hi <- rcorr(as.matrix(data_2xLPS[,9:35]), type="spearman")
mat1 <- hi$r
filter <- which(abs(mat1)<0.8)
mat2 <- hi$P
mat2 <- round(mat2,3)
mat2[mat2 < 0.05] <- "*" # significant p-values
mat2[mat2 > 0.05] <- "" # insignificant p-values
mat2[is.na(mat2)] <- "" # NAs (should be 27)
mat2[filter] <- "" # correlation values that are less than 0.5 (weak correlations)
# make heatmap
pheatmap(hi$r, display_numbers = mat2,
fontsize_number=8, fontsize=8, fontsize_row=8, fontsize_col=8,
main="Correlations across features")
hi <- rcorr(as.matrix(data_2xLPS_logtransformed[,9:35]), type="spearman")
mat1 <- hi$r
filter <- which(abs(mat1)<0.8)
mat2 <- hi$P
mat2 <- round(mat2,3)
mat2[mat2 < 0.05] <- "*" # significant p-values
mat2[mat2 > 0.05] <- "" # insignificant p-values
mat2[is.na(mat2)] <- "" # NAs (should be 27)
mat2[filter] <- "" # correlation values that are less than 0.5 (weak correlations)
# make heatmap
pheatmap(hi$r, display_numbers = mat2,
fontsize_number=8, fontsize=8, fontsize_row=8, fontsize_col=8,
main="Correlations across features")
hi <- rcorr(as.matrix(data_2xLPS[,9:35]), type="spearman")
mat1 <- hi$r
filter <- which(abs(mat1)<0.8)
mat2 <- hi$P
mat2 <- round(mat2,3)
mat2[mat2 < 0.05] <- "*" # significant p-values
mat2[mat2 > 0.05] <- "" # insignificant p-values
mat2[is.na(mat2)] <- "" # NAs (should be 27)
mat2[filter] <- "" # correlation values that are less than 0.5 (weak correlations)
# make heatmap
pheatmap(hi$r, display_numbers = mat2,
fontsize_number=8, fontsize=8, fontsize_row=8, fontsize_col=8,
main="Correlations across features")
devtools::document()
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
devtools::document()
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
devtools::document()
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
?metadata_columns
devtools::document()
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
devtools::document()
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
devtools::document()
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
devtools::document()
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
pca_data <- pcadata(data_2xLPS_logtransformed, start=9, end=35,
pc.start=1, pc.end=10)
pcfeaturecorrelations(pca_data, pc.start=1, pc.end=3,
feature.start=19, feature.end=45,
rthresh=0.75, pthresh=0.05,
title="Correlation between PCs and features")
data
# prepare data for downstream analysis
data <- data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
# filter out data you want to run stats on and make sure to make any variables included in model into factors
stats.input <- data
stats.input$Treatment <- factor(stats.input$Treatment)
# run stats analysis for changes in individual morphology measures
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
stats.testing <- stats_morphologymeasures.animal(stats.input %>% filter(Antibody=="Iba1"), "Value ~ Treatment*BrainRegion",
"~Treatment|BrainRegion", "~Treatment", "bonferroni")
stats.testing[[3]] # posthoc 2
stats.testing[[2]] # posthoc 1
stats.input
# run stats analysis for changes in individual morphology measures
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
stats.testing <- stats_morphologymeasures.animal(stats.input %>%
filter(Antibody=="Iba1" & Measure!=c("Foreground pixels", "# of junctions")), "Value ~ Treatment*BrainRegion",
"~Treatment|BrainRegion", "~Treatment", "bonferroni")
stats.input %>%
filter(Antibody=="Iba1" & Measure!=c("Foreground pixels", "# of junctions")
stats.input %>%
filter(Antibody=="Iba1" & Measure!=c("Foreground pixels", "# of junctions"))
# run stats analysis for changes in individual morphology measures
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
stats.testing <- stats_morphologymeasures.animal(stats.input %>%
filter(Antibody=="Iba1" & Measure!="Foreground pixels"),
"Value ~ Treatment*BrainRegion",
"~Treatment|BrainRegion", "~Treatment", "bonferroni")
stats.testing[[2]]
stats.input$Measure %>% factor() %>% levels()
# run stats analysis for changes in individual morphology measures
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
stats.testing <- stats_morphologymeasures.animal(stats.input %>%
filter(Antibody=="Iba1") %>%
filter(!Measure %in% c("Foreground pixels",
"Average branch length",
"# of quadruple points",
"Height of bounding rectangle")),
"Value ~ Treatment*BrainRegion",
"~Treatment|BrainRegion", "~Treatment", "bonferroni")
stats.testing[[1]] # anova
stats.input %>%
filter(Antibody=="Iba1") %>%
filter(!Measure %in% c("Foreground pixels",
"Average branch length",
"# of quadruple points",
"Height of bounding rectangle"))
stats.input %>%
filter(Antibody=="Iba1") %>%
filter(!Measure %in% c("Foreground pixels",
"Average branch length",
"# of quadruple points",
"Height of bounding rectangle")) -> hi
hi$Measure %>% factor() %>% levels()
do.call("grid.arrange", c(stats.testing[[4]], ncol=4)) # qqplots to check normality assumptions
# prepare data for downstream analysis
data <- data_2xLPS_logtransformed %>%
group_by(MouseID, Sex, Treatment) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
# prepare data for downstream analysis
data <- data_2xLPS_logtransformed %>%
group_by(MouseID, Sex, Treatment) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
head(data)
# filter out data you want to run stats on and make sure to make any variables included in model into factors
stats.input <- data
stats.input$Treatment <- factor(stats.input$Treatment)
stats.input$MouseID <- factor(stats.input$MouseID)
stats.input$BrainRegion <- factor(stats.input$BrainRegion)
stats.input %>% filter(Antibody=="Iba1")
devtools::document()
devtools::document()
# checking different normalization features
normalize_logplots(data_2xLPS_gathered,1)
devtools::document()
normalize_minmax(data_2xLPS_gathered)
# checking different normalization features
normalize_logplots(data_2xLPS_gathered,1)
devtools::document()
# gather your numerical morphology data into one column ('measure') which contains the feature name, and another column ('value') which contains measured values
data_2xLPS_gathered <- data_2xLPS %>% gather(measure, value, 9:ncol(data_2xLPS))
# checking different normalization features
normalize_logplots(data_2xLPS_gathered,1)
devtools::document()
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
devtools::document()
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
devtools::document()
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
?heatmap_legend_param
??heatmap_legend_param
devtools::document()
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
devtools::document()
pcfeaturecorrelations(pca_data, pc.start=1, pc.end=3,
feature.start=19, feature.end=45,
rthresh=0.75, pthresh=0.05,
title="Correlation between PCs and features")
clusterfeatures(pca_kmeans, start=11, end=37)
devtools::document()
pca_data <- pcadata(data_2xLPS_logtransformed, start=9, end=35,
pc.start=1, pc.end=10)
# cluster and combine with original data
data_kmeans <- kmeans(kmeans_input, centers=4)
## for k-means clustering: scale PCs 1-3, which together describe ~85% of variability
pca_data_scale <- transform_scale(pca_data, start=1, end=3) # scale pca data as input for k-means clustering
kmeans_input <- pca_data_scale[1:3]
pca_data
## for k-means clustering: scale PCs 1-3, which together describe ~85% of variability
pca_data_scale <- transform_scale(pca_data, start=1, end=3) # scale pca data as input for k-means clustering
colnames(pca_data)
devtools::document()
- [ ] At start of GitHub: include graphic on major types of morphologies (which is what most people will see in their datasets) and a few sentences on rarer types of morphologies that clustering could allow you to see if you wanted.
featurecorrelations(data_2xLPS, featurestart=9, featureend=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
devtools::document()
devtools::document()
?summary.emmGrid
?emmeans::summary.emmGrid
devtools::document()
?stats_morphologymeasures.animal
?stats_cluster.animal
devtools::document()
library(devtools)
use_package("gridExtra")
document()
load()
devtools::load()
library(MicrogliaMorphologyR)
devtools::document()
devtools::document()
library(MicrogliaMorphologyR)
?stats_morphologymeasures.animal
devtools::load()
devtools::document()
?stats_morphologymeasures.animal
stats_cluster.animal
?stats_cluster.animal
?identify_outliers
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
library(rstatix)
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
outliers
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
#remove outliers
df2 <- data_2xLPS_mouse  %>%
group_by(MouseID, Treatment, Sex) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
#remove outliers
df2 <- data_2xLPS_mouse  %>%
group_by(MouseID, Treatment, Sex) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
df2 <- merge(df2, outliers, by=c("Measure","UniqueID"), all.x=T)
new_DF <- df2[is.na(df2$is.outlier),]
new_DF <- new_DF[,1:17]
colnames(new_DF) <- gsub("\\.x","",colnames(new_DF))
df2
new_DF <- df2[is.na(df2$is.outlier),]
df2
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
#remove outliers
df2 <- data_2xLPS_mouse  %>%
group_by(MouseID, Treatment, Sex) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
df2
df2 <- merge(df2, outliers, by=c("Measure","UniqueID"), all.x=T)
df2
new_DF <- df2[is.na(df2$is.outlier),]
new_DF
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
outliers
tail(outliers)
filter <- data_2xLPS_mouse %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
filter <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
filter
is.na(df2$is.outlier)
df2$is.outlier
filter
subset(data_2xLPS_mouse, UniqueID %in% filter$UniqueID)
subset(data_2xLPS_mouse, UniqueID !%in% filter$UniqueID)
data_2xLPS_mouse %>% filter(UniqueID %in% filter$UniqueID)
data_2xLPS_mouse %>% filter!(UniqueID %in% filter$UniqueID)
data_2xLPS_mouse %>% filter(!UniqueID %in% filter$UniqueID)
data_2xLPS_mouse %>% filter(UniqueID %in% !filter$UniqueID)
data_2xLPS_mouse %>% filter(!UniqueID %in% filter$UniqueID)
data_2xLPS_mouse %>% filter(!UniqueID %in% c(filter$UniqueID))
subset(data_2xLPS_mouse, !(UniqueID %in% filter$UniqueID))
filter$UniqueID
filter <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
filter
subset(data_2xLPS_mouse, !(UniqueID %in% filter$UniqueID))
nrow(filter)
subset(data_2xLPS_mouse, UniqueID %in% filter$UniqueID) %>% nrow()
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
data_2xLPS_mouse %>% filter(UniqueID %in% filterdf$UniqueID) %>% nrow()
data_2xLPS_mouse
filterdf
data_2xLPS_mouse %>% filter(!data_2xLPS_mouse$UniqueID %in% filterdf$UniqueID) %>% nrow()
data_2xLPS_mouse$UniqueID
filterdf$UniqueID
data_2xLPS_mouse$UniqueID %>% head(5)
filterdf$UniqueID %>% head(5)
nrow(filterdf)
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment) %>%
identify_outliers(Value)
outliers
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
nrow(filterdf)
nrow(outliers)
filterdf$UniqueID %>% factor() %>% levels()
nrow(data_2xLPS_mouse)
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment, Measure) %>%
identify_outliers(Value)
outliers
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
filterdf
data_2xLPS_mouse %>% filter(!data_2xLPS_mouse$UniqueID %in% filterdf$UniqueID) %>% nrow()
nrow(data_2xLPS_mouse)
data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID) %.% nrow()
data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID) %>% nrow()
nrow(filterdf) + 41247
data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID) %>% nrow()
nrow(filterdf)
41247+2637
nrow(data_2xLPS_mouse)
# identify any outliers at the cell level and remove
outliers <- data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex) %>%
#summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment, Measure) %>%
identify_outliers(Value)
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
filterdf
nrow(filterdf)
data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID)
filterdf
nrow(filterdf)
filterdf$UniqueID %>% factor() %>% levels()
2085 + nrow(data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID))
new_DF2 <- final %>%
group_by(MouseID, Treatment, Sex) %>%
spread(Measure, Value)
final <- data_2xLPS_mouse %>% filter(!UniqueID %in% filterdf$UniqueID)
new_DF2 <- final %>%
group_by(MouseID, Treatment, Sex) %>%
spread(Measure, Value)
final
new_DF2 <- final %>%
group_by(MouseID, Treatment, Sex) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length") %>%
group_by(MouseID, Sex, Treatment, Measure) %>%
spread(Measure, Value)
new_DF2
colnames(new_DF2)
?spread
??spread
data_2xLPS_mouse %>%
group_by(MouseID, Treatment, Sex)
data_2xLPS
data_2xLPS <- data_2xLPS_mouse
data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x)))
data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>% colnames()
remove.extreme.outliers_animals <- function(data, ...){
outliers <- data %>%
group_by(..., Measure) %>>%
identify_outliers(Value)
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
final <- data %>% filter(!MouseID %in% filterdf$MouseID)
final
}
# prepare data for downstream analysis
data <- data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
remove.extreme.outliers_animals(data, MouseID, Sex, Treatment, BrainRegion, Antibody)
outliers <- data %>%
group_by(..., Measure) %>%
identify_outliers(Value)
remove.extreme.outliers_animals <- function(data, ...){
outliers <- data %>%
group_by(..., Measure) %>%
identify_outliers(Value)
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
final <- data %>% filter(!MouseID %in% filterdf$MouseID)
final
}
remove.extreme.outliers_animals(data, MouseID, Sex, Treatment, BrainRegion, Antibody)
test <- remove.extreme.outliers_animals(data, MouseID, Sex, Treatment, BrainRegion, Antibody)
test
View(test)
nrow(data)
nrow(test)
remove.extreme.outliers_animals <- function(data, ...){
outliers <- data %>%
group_by(..., Measure) %>%
identify_outliers(Value)
filterdf <- outliers %>% filter(is.outlier=="TRUE" & is.extreme=="TRUE")
print(filterdf)
final <- data %>% filter(!MouseID %in% filterdf$MouseID)
final
}
test <- remove.extreme.outliers_animals(data, MouseID, Sex, Treatment, BrainRegion, Antibody)
outliers <- data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure) %>%
identify_outliers(Value)
outliers
data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure)
data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure) %>% summarise(Measure, mean)
data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure) %>% summarise(Measure,
~mean)
?summarise
data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure) %>% summarise(test = mean(Measure))
data %>%
group_by(Measure) %>% summarise(test = mean(Measure))
data %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody, Measure) %>% summarise(test = mean(Value))
test <- remove.extreme.outliers_animals(data, MouseID, Sex, Treatment, BrainRegion, Antibody)
test
nrow(test)
nrow(Data)
nrow(data)
data
devtools::document()
# prepare data for downstream analysis
data <- data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
# filter out data you want to run stats on and make sure to make any variables included in model into factors
stats.input <- data
stats.input$Treatment <- factor(stats.input$Treatment)
# run stats analysis for changes in individual morphology measures
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
stats.testing <- stats_morphologymeasures.animal(stats.input %>% filter(Antibody=="Iba1"), "Value ~ Treatment*BrainRegion",
"~Treatment|BrainRegion", "~Treatment", "bonferroni")
stats.testing[[5]]
stats.testing[[6]]
stats.testing[[5]] # levene test %>% view()
stats.testing[[5]] # levene test %>% View()
stats.testing[[5]] %>% View()
?rcorr
cp
skeleton_tidying
knitr::opts_chunk$set(echo = TRUE)
library(MicrogliaMorphologyR)
set.seed(1)
data_2xLPS <- MicrogliaMorphologyR::data_2xLPS_mouse_fuzzykmeans
# gather your numerical morphology data into one column ('measure') which contains the feature name, and another column ('value') which contains measured values
data_2xLPS_gathered <- data_2xLPS %>% gather(measure, value, 9:35)
# transform your data in appropriate manner for downstream analyses
data_2xLPS_logtransformed <- transform_log(data_2xLPS, 1, start=9, end=35) # we will use the logtransformed data as our PCA input
featurecorrelations(data_2xLPS, start=9, end=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
# get sample size of data based on factors of interest
samplesize(data_2xLPS, MouseID, Treatment, Antibody)
?featurecorrelations
featurecorrelations(data_2xLPS, featurestart=9, featureend=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
featurecorrelations(data_2xLPS, featurestart=9, featureend=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
featurecorrelations(data_2xLPS, featurestart=9, featureend=35, rthresh=0.8, pthresh=0.05, title="Correlations across features")
