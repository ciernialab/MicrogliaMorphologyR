hello <- featurecorrelations_test(data_2xLPS,
featurestart=9, featureend=35,
rthresh=0.8, pthresh=0.05,
title="Correlations across features")
as.data.frame(hi$r)
data=data_2xLPS
featurestart=9
featureend=35
rthresh=0.8
pthresh=0.05
title="Correlations across features"
hi <- rcorr(as.matrix(data[,featurestart:featureend]), type="spearman")
mat1 <- hi$r
filter <- which(abs(mat1)<rthresh)
mat2 <- hi$P
mat2 <- round(mat2,3)
mat2[mat2 < pthresh] <- "*" # significant p-values
mat2[mat2 > pthresh] <- "" # insignificant p-values
mat2[is.na(mat2)] <- "" # NAs (should be 27)
mat2[filter] <- "" # correlation value filter
head(hi$r)
hi$r %>% as.data.frame() %>% head(2)
featurecorrelations_list[[2]] <-
correlations <- hi$r %>%
as.data.frame() %>%
rownames_to_column("measure_a") %>%
gather("measure_b", "correlation", c(2:ncol(.)))
correlations <- hi$r %>%
as.data.frame() %>%
rownames_to_column("measure_a") %>%
gather("measure_b", "correlation", c(2:ncol(.)))
correlations
head(correlations)
pvalues <- hi$P %>%
as.data.frame() %>%
rownames_to_column("measure_a") %>%
gather("measure_b", "pvalues", c(2:ncol(.)))
tosave <- merge(correlations, pvalues, by=c("measure_a","measure_b"))
featurecorrelations_test <- function(data,featurestart,featureend,rthresh,pthresh,title){
featurecorrelations_list = list()
# correlations with p-values
hi <- rcorr(as.matrix(data[,featurestart:featureend]), type="spearman")
mat1 <- hi$r
filter <- which(abs(mat1)<rthresh)
mat2 <- hi$P
mat2 <- round(mat2,3)
mat2[mat2 < pthresh] <- "*" # significant p-values
mat2[mat2 > pthresh] <- "" # insignificant p-values
mat2[is.na(mat2)] <- "" # NAs (should be 27)
mat2[filter] <- "" # correlation value filter
# format data for saving stats table
correlations <- hi$r %>%
as.data.frame() %>%
rownames_to_column("measure_a") %>%
gather("measure_b", "correlation", c(2:ncol(.)))
pvalues <- hi$P %>%
as.data.frame() %>%
rownames_to_column("measure_a") %>%
gather("measure_b", "pvalues", c(2:ncol(.)))
tosave <- merge(correlations, pvalues, by=c("measure_a","measure_b"))
# add to list
featurecorrelations_list[[1]] <-
pheatmap(hi$r, display_numbers = mat2, border_color=NA,
fontsize_number=12,
main=title)
featurecorrelations_list[[2]] <- tosave
featurecorrelations_list
}
hello <- featurecorrelations_test(data_2xLPS,
featurestart=9, featureend=35,
rthresh=0.8, pthresh=0.05,
title="Correlations across features")
hello[[2]]
hello[[1]]
document()
load_all()
rm(list=c('featurecorrelations'))
load_all()
document()
?featurecorrelations
featurecorrelation_output <- featurecorrelations(data_2xLPS,
featurestart=9, featureend=35,
rthresh=0.8, pthresh=0.05,
title="Correlations across features")
featurecorrelation_output[[1]] # correlation heatmap
featurecorrelation_output[[2]] # r and p values
featurecorrelation_output[[1]] # correlation heatmap
featurecorrelation_output[[1]]
featurecorrelation_output[[1]] # correlation heatmap
featurecorrelations(data_2xLPS,
featurestart=9, featureend=35,
rthresh=0.8, pthresh=0.05,
title="Correlations across features")
featurecorrelation_output[[1]] # correlation heatmap
featurecorrelation_output[[2]]
featurecorrelation_output[[2]] %>% class()
featurecorrelation_output[[2]] # r and p values
featurecorrelation_output[[2]] %>% head()
featurecorrelation_output[[2]]
featurecorrelations
View(featurecorrelation_output)
#featurecorrelation_output[[1]] # correlation heatmap
featurecorrelation_output[[2]] %>% head() # r and p values
load_all()
document()
featurecorrelation_output <- featurecorrelations(data_2xLPS,
featurestart=9, featureend=35,
rthresh=0.8, pthresh=0.05,
title="Correlations across features")
featurecorrelation_output[[2]] %>% head() # r and p values
load_all()
document()
featurecorrelation_output[[2]]
featurecorrelation_output[[2]] -> hello
hello
featurecorrelation_output2
featurecorrelation_output[[2]]
load_all()
document()
featurecorrelation_output <- featurecorrelations(data_2xLPS,
featurestart=9, featureend=35,
rthresh=0.8, pthresh=0.05,
title="Correlations across features")
featurecorrelation_output[[1]] # correlation heatmap
featurecorrelation_output[[1]] # correlation heatmap
featurecorrelation_output[[2]] %>% head() # r and p values
featurecorrelation_output[[1]] # correlation heatmap
featurecorrelation_output[[1]]
featurecorrelation_output[[1]]
featurecorrelation_output[[2]] %>% head() # r and p values
featurecorrelation_output[[1]]
hi
p <- pheatmap(hi$r, display_numbers = mat2, border_color=NA,
fontsize_number=12,
main=title)
p
pheatmap(p)
load_all()
document()
featurecorrelation_output <- featurecorrelations(data_2xLPS,
featurestart=9, featureend=35,
rthresh=0.8, pthresh=0.05,
title="Correlations across features")
featurecorrelation_output
featurecorrelation_output %>% head() # r and p values
load_all()
document()
featurecorrelation_output <- featurecorrelations(data_2xLPS,
featurestart=9, featureend=35,
rthresh=0.8, pthresh=0.05,
title="Correlations across features")
featurecorrelation_output %>% head()
tosave
head(tosave)
correlations <- hi$r %>%
as.data.frame() %>%
rownames_to_column("measure_a") %>%
gather("measure_b", "correlation", c(2:ncol(.)))
pvalues <- hi$P %>%
as.data.frame() %>%
rownames_to_column("measure_a") %>%
gather("measure_b", "pvalues", c(2:ncol(.)))
tosave <- merge(correlations, pvalues, by=c("measure_a","measure_b")) %>% as.data.frame()
tosave$Significant <- ifelse(abs(tosave$correlation) > rthresh & tosave$pvalues < pthresh, "significant", "ns")
tosave
tosave <- merge(correlations, pvalues, by=c("measure_a","measure_b")) %>% as.data.frame()
tosave$Significant <- ifelse(abs(tosave$correlation) >= rthresh & tosave$pvalues < pthresh, "significant", "ns")
tosave
View(tosave)
load_all()
document()
# to get the underlying stats depicted in the heatmap above
correlationstats <- featurecorrelation_stats(data_2xLPS,
featurestart=9, featureend=35,
rthresh=0.8, pthresh=0.05)
# to get the underlying stats depicted in the heatmap above
correlationstats <- featurecorrelations_stats(data_2xLPS,
featurestart=9, featureend=35,
rthresh=0.8, pthresh=0.05)
correlationstats %>% head()
?featurecorrelations_stats
document()
# to get the underlying stats depicted in the heatmap above
correlationstats <- featurecorrelations_stats(data_2xLPS,
featurestart=9, featureend=35,
rthresh=0.8, pthresh=0.05)
correlationstats %>% head()
devtools::install_github('ciernialab/MicrogliaMorphologyR')
load_all()
document()
# use celldensity function to calculate density at image-level: values are under the "Density" column
Density <- celldensity(AreasPath, microglianumbers)
Density %>% head()
celldensity
# use celldensity function to calculate density at image-level: values are under the "Density" column
Density <- celldensity(AreasPath, microglianumbers)
Density %>% View()
document()
?celldensity
celldensity
# use celldensity function to calculate density at image-level: values are under the "Density" column
Density <- celldensity(AreasPath, microglianumbers)
Density %>% print(n=5, width=Inf) # to be able to see all the rows in this document)
?featurecorrelations_stats
pca_data=pca_data
pc.start=1
pc.end=3
feature.start=19
feature.end=45
rthresh=0.75
pthresh=0.05
pc.start2 <- colnames(pca_data[pc.start])
pc.end2 <- colnames(pca_data[pc.end])
morphologyfeatures <- colnames(pca_data[, feature.start:feature.end])
PCs <- colnames(pca_data[, pc.start:pc.end])
master_correlations <- NULL
master_pvalues <- NULL
for (p in PCs) {
all_correlations <- NULL
all_pvalues <- NULL
for (m in morphologyfeatures) {
master <- rcorr(as.matrix(pca_data[, c(p, m)]), type = "spearman")
correlations <- as.data.frame(master$r)
correlations <- rownames_to_column(correlations,
"PC")
correlations <- correlations %>% dplyr::select("PC",
m) %>% .[1, ]
names(correlations)[names(correlations) == m] <- "value"
correlations$measure <- paste(m)
all_correlations <- rbind(all_correlations, correlations)
pvalues <- as.data.frame(master$P)
pvalues <- rownames_to_column(pvalues, "PC")
pvalues <- pvalues %>% dplyr::select("PC", m) %>%
.[1, ]
names(pvalues)[names(pvalues) == m] <- "value"
pvalues$measure <- paste(m)
all_pvalues <- rbind(all_pvalues, pvalues)
}
master_correlations <- rbind(master_correlations, all_correlations)
master_pvalues <- rbind(master_pvalues, all_pvalues)
}
master_correlations_PC = list()
for (p in PCs) {
master_correlations_PC[[p]] = master_correlations %>%
filter(PC == p) %>% dplyr::rename(`:=`(!!p, value)) %>%
select(-PC)
}
pc.start2
pca_data
data_2xLPS_logtransformed
# transform your data in appropriate manner for downstream analyses
# we will use the logtransformed data as our PCA input
data_2xLPS_logtransformed <- transform_log(data_2xLPS, 1, start=9, end=35)
pca_data <- pcadata(data_2xLPS_logtransformed, featurestart=9, featureend=35,
pc.start=1, pc.end=10)
head(pca_data,3)
pca_data=pca_data
pc.start=1
pc.end=3
feature.start=19
feature.end=45
rthresh=0.75
pthresh=0.05
pc.start2 <- colnames(pca_data[pc.start])
pc.end2 <- colnames(pca_data[pc.end])
morphologyfeatures <- colnames(pca_data[, feature.start:feature.end])
PCs <- colnames(pca_data[, pc.start:pc.end])
master_correlations <- NULL
master_pvalues <- NULL
for (p in PCs) {
all_correlations <- NULL
all_pvalues <- NULL
for (m in morphologyfeatures) {
master <- rcorr(as.matrix(pca_data[, c(p, m)]), type = "spearman")
correlations <- as.data.frame(master$r)
correlations <- rownames_to_column(correlations,
"PC")
correlations <- correlations %>% dplyr::select("PC",
m) %>% .[1, ]
names(correlations)[names(correlations) == m] <- "value"
correlations$measure <- paste(m)
all_correlations <- rbind(all_correlations, correlations)
pvalues <- as.data.frame(master$P)
pvalues <- rownames_to_column(pvalues, "PC")
pvalues <- pvalues %>% dplyr::select("PC", m) %>%
.[1, ]
names(pvalues)[names(pvalues) == m] <- "value"
pvalues$measure <- paste(m)
all_pvalues <- rbind(all_pvalues, pvalues)
}
master_correlations <- rbind(master_correlations, all_correlations)
master_pvalues <- rbind(master_pvalues, all_pvalues)
}
master_correlations_PC = list()
for (p in PCs) {
master_correlations_PC[[p]] = master_correlations %>%
filter(PC == p) %>% dplyr::rename(`:=`(!!p, value)) %>%
select(-PC)
}
testing <- master_correlations_PC %>% reduce(inner_join,
by = "measure", keep = FALSE)
testing
heatmap_PC_correlations <- testing[, c(2, 1, 3:ncol(testing))]
heatmap_PC_correlations <- heatmap_PC_correlations %>% column_to_rownames(var = "measure")
rownames(heatmap_PC_correlations) <- morphologyfeatures
master_pvalues_PC = list()
for (p in PCs) {
master_pvalues_PC[[p]] = master_pvalues %>% filter(PC ==
p) %>% dplyr::rename(`:=`(!!p, value)) %>% select(-PC)
}
testing <- master_pvalues_PC %>% reduce(inner_join, by = "measure",
keep = FALSE)
testing
heatmap_PC_pvalues <- testing[, c(2, 1, 3:ncol(testing))]
heatmap_PC_pvalues <- heatmap_PC_pvalues %>% column_to_rownames(var = "measure")
rownames(heatmap_PC_pvalues) <- morphologyfeatures
heatmap_PC_correlations
head(heatmap_PC_pvalues)
head(heatmap_PC_correlations)
nrow(heatmap_PC_correlations)
nrow(heatmap_PC_pvalues)
correlations <- heatmap_PC_correlations %>%
as.data.frame() %>%
rownames_to_column("measure_a") %>%
gather("measure_b", "correlation", c(2:ncol(.)))
correlations
nrow(correlations)
27*3
pvalues <- heatmap_PC_pvalues %>%
as.data.frame() %>%
rownames_to_column("measure_a") %>%
gather("measure_b", "pvalues", c(2:ncol(.)))
nrow(pvalues)
head(pvalues)
tosave <- merge(correlations, pvalues, by=c("measure_a","measure_b")) %>% as.data.frame()
head(tosave)
nrow(tosave)
tosave$Significant <- ifelse(abs(tosave$correlation) >= rthresh & tosave$pvalues < pthresh, "significant", "ns")
head(tosave)
load_all()
document()
# to get the underlying stats depicted in the heatmap above
correlationstats <- pcfeaturecorrelations_stats(pca_data, pc.start=1, pc.end=3,
feature.start=19, feature.end=45,
rthresh=0.75, pthresh=0.05)
correlationstats %>% head()
View(correlationstats)
## for k-means clustering: scale PCs 1-3, which together describe ~85% of variability
pca_data_scale <- transform_scale(pca_data, start=1, end=3) # scale pca data as input for k-means clustering
kmeans_input <- pca_data_scale[1:3]
# cluster and combine with original data
data_kmeans <- kmeans(kmeans_input, centers=4)
# Here, we are creating a new data frame that contains the first 2 PCs and original dataset, then renaming the data_kmeans$cluster column to simply say "Cluster". You can bind together as many of the PCs as you want. Binding the original, untransformed data is useful if you want to plot the raw values of any individual morphology measures downstream.
pca_kmeans <- cbind(pca_data[1:2], data_2xLPS, as.data.frame(data_kmeans$cluster)) %>%
rename(Cluster=`data_kmeans$cluster`)
# calculate cluster percentages across variables of interest
cp <- clusterpercentage(pca_kmeans, "Cluster", MouseID, Antibody, Treatment, Sex, BrainRegion)
cp$Treatment <- factor(cp$Treatment, levels=c("PBS","2xLPS"))
# update cluster labels
cp <- cp %>% mutate(Cluster =
case_when(Cluster=="1" ~ "Rod-like",
Cluster=="2" ~ "Ameboid",
Cluster=="3" ~ "Ramified",
Cluster=="4" ~ "Hypertrophic"))
# Quick check of cluster proportions when considering experimental variables of interest
cp %>%
filter(BrainRegion=="STR") %>% # in this example, we filter for our brain region of interest
clusterpercentage_boxplots(Antibody, Treatment) # grouping variables
# prepare percentages dataset for downstream analysis
stats.input <- cp
stats.input$MouseID <- factor(stats.input$MouseID)
stats.input$Cluster <- factor(stats.input$Cluster)
stats.input$Treatment <- factor(stats.input$Treatment)
# prepare data for downstream analysis
data <- data_2xLPS %>%
group_by(MouseID, Sex, Treatment, BrainRegion, Antibody) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
# filter out data you want to run stats on and make sure to make any variables included in model into factors
stats.input <- data
stats.input$Treatment <- factor(stats.input$Treatment)
data = stats.input
model = "Value ~ Treatment*Antibody*BrainRegion + (1|MouseID)"
type = "lmer"
posthoc1 = "~Treatment|Antibody|BrainRegion"
posthoc2 = "~Treatment|Antibody"
adjust = "bonferroni"
y.model <- as.character(model)
z.model <- as.character(posthoc1)
a.model <- as.character(posthoc2)
measure <- unique(as.character(data$Measure))
log_ggqqplots = list()
final.output = list()
anova.out <- NULL
posthoc.out <- NULL
posthoc.out2 <- NULL
levene_out <- NULL
shapiro_out <- NULL
for (m in measure) {
tmp <- data %>% filter(Measure == m)
tmp <- as.data.frame(tmp)
print(m)
options(contrasts = c("contr.sum", "contr.poly"))
if (type == "lm"){
model <- lm(as.formula(paste(y.model)), data = tmp)
}
if (type == "lmer"){
model <- lme4::lmer(as.formula(paste(y.model)), data = tmp) # add lme4 to package dependencies
}
log_ggqqplots[[m]] = ggqqplot(residuals(model)) + labs(title = m)
anova = car::Anova(model)
anova$measure <- paste(m)
shapiro <- shapiro_test(residuals(model))
if (shapiro$p.value > 0.05) {
shapiro$pass <- c("pass")
}
else {
shapiro$pass <- c("fail")
}
shapiro$measure <- paste(m)
ph <- emmeans(model, as.formula(paste(z.model)))
ph2 <- contrast(ph, method = "pairwise", adjust = "none")
ph3 <- test(ph2, by = NULL, adjust = adjust)
outsum <- as.data.frame(ph3)
outsum$measure <- paste(m)
ph <- emmeans(model, as.formula(paste(a.model)))
ph2 <- contrast(ph, method = "pairwise", adjust = "none")
ph3 <- test(ph2, by = NULL, adjust = adjust)
outsum2 <- as.data.frame(ph3)
outsum2$measure <- paste(m)
anova.out <- rbind(anova.out, anova)
posthoc.out <- rbind(posthoc.out, outsum)
posthoc.out2 <- rbind(posthoc.out2, outsum2)
shapiro_out <- rbind(shapiro_out, shapiro)
}
if (type == "lm"){
anova.out$Significant <- ifelse(anova.out$`Pr(>F)` < 0.05,
"significant", "ns")
}
if (type == "lmer"){
anova.out$Significant <- ifelse(anova.out$`Pr(>Chisq)` < 0.05,
"significant", "ns")
}
posthoc.out$Significant <- ifelse(posthoc.out$p.value < 0.05,
"significant", "ns")
posthoc.out2$Significant <- ifelse(posthoc.out2$p.value <
0.05, "significant", "ns")
final.output[[1]] = as.data.frame(anova.out)
final.output[[2]] = posthoc.out
final.output[[3]] = posthoc.out2
final.output[[4]] = log_ggqqplots
final.output[[5]] = as.data.frame(levene_out)
final.output[[6]] = as.data.frame(shapiro_out)
final.output[[7]] = print(summary(model))
final.output[[1]]
final.output[[1]] %>% head()
final.output[[2]] %>% head()
final.output[[3]] %>% head()
final.output[[4]] %>% head()
final.output[[5]] %>% head()
final.output[[5]]
final.output[[6]]
final.output[[6]] %>% head()
final.output[[7]]
?stats_morphologymeasures.animal
final.output[[1]]
load_all()
document()
?stats_cluster.animal
?stats_morphologymeasures.animal
?stats_cluster.animal
?stats_morphologymeasures.animal
# run stats analysis for changes in individual morphology measures
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
stats.testing <- stats_morphologymeasures.animal(data = stats.input %>% filter(Antibody=="Iba1"),
model = "Value ~ Treatment*BrainRegion", type="lm",
posthoc1 = "~Treatment|BrainRegion",
posthoc2 = "~Treatment*BrainRegion", adjust = "bonferroni")
stats.testing
stats.testing[[1]] %>% head(8)
stats.testing[[2]] %>% head(6)
# posthoc 1
stats.testing[[2]] %>% head(6)
# posthoc 2
stats.testing[[3]] %>% head(6)
# qqplots to check normality assumptions
do.call("grid.arrange", c(stats.testing[[4]], ncol=4))
# shapiro test
stats.testing[[5]] %>% head(6)
stats.testing[[6]]
# run stats analysis for changes in individual morphology measures
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
stats.testing <- stats_morphologymeasures.animal(data = stats.input %>%
filter(Antibody=="Iba1") %>%
filter(!Measure %in% c("Foreground pixels",
"Average branch length",
"# of quadruple points",
"Height of bounding rectangle")),
model = "Value ~ Treatment*BrainRegion", type = "lm",
posthoc1 = "~Treatment|BrainRegion",
posthoc2 = "~Treatment*BrainRegion", adjust ="bonferroni")
# anova
stats.testing[[1]] %>% head(8)
# posthoc 1
stats.testing[[2]] %>% head(6)
# posthoc 2
stats.testing[[3]] %>% head(6)
# qqplots to check normality assumptions
do.call("grid.arrange", c(stats.testing[[4]], ncol=4))
# shapiro test
stats.testing[[5]] %>% head(6)
devtools::install_github('ciernialab/MicrogliaMorphologyR')
